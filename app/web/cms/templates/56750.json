{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const { date, task } = req.body;\n  var myDate;\n  var mValue = {};\n  var listHigh = [];\n  var listMedium = [];\n  var listLow = [];\n  var total = [];\n  var stats = {};\n  var stats1 = {};\n  var listType = [];\n  var types = [];\n  var listDep = [];\n  var listEmployeeLow = [];\n  var departments = [];\n  var employeeLow = [];\n  var totalEmployee = [];\n  var totalEmployee1 = [];\n  var listEmployee1 = [];\n\n  var tahun = 0;\n\n  if (date === null) {\n    myDate = new Date();\n    tahun = ext.tahun(myDate);\n  } else {\n    myDate = date;\n    tahun = ext.tahun(myDate);\n  }\n\n  //Get Overall ticket\n  if (task === \"overall\" || task === \"all\") {\n    for (let i = 1; i < 13; i++) {\n      var jumlah = await db.history_ticket.count({\n        where: {\n          tahun,\n          bulan: i,\n          id_vendor: user.user.dataUser.id_vendor,\n        },\n      });\n      total.push(jumlah);\n    }\n  }\n\n  //Get Ticket by Level\n  if (task === \"level\" || task === \"all\") {\n    for (let i = 1; i < 13; i++) {\n      var high = await db.history_ticket.count({\n        where: {\n          OR: [\n            {\n              id_level_ticket: 1,\n              solvedDay: myDate,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n            {\n              id_level_ticket: 1,\n              solvedDay: null,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n          ],\n        },\n      });\n      listHigh.push(high);\n    }\n\n    for (let i = 1; i < 13; i++) {\n      var medium = await db.history_ticket.count({\n        where: {\n          OR: [\n            {\n              id_level_ticket: 2,\n              solvedDay: myDate,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n            {\n              id_level_ticket: 2,\n              solvedDay: null,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n          ],\n        },\n      });\n      listMedium.push(medium);\n    }\n\n    for (let i = 1; i < 13; i++) {\n      var low = await db.history_ticket.count({\n        where: {\n          OR: [\n            {\n              id_level_ticket: 3,\n              solvedDay: myDate,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n            {\n              id_level_ticket: 3,\n              solvedDay: null,\n              id_vendor: user.user.dataUser.id_vendor,\n              tahun,\n              bulan: i,\n            },\n          ],\n        },\n      });\n      listLow.push(low);\n    }\n    stats = { high: listHigh, medium: listMedium, low: listLow };\n  }\n\n  //Get Ticket by Type\n  if (task === \"type\" || task === \"all\") {\n    var ticketType = await db.jenis_ticket.findMany({\n      where: {\n        id_vendor: user.user.dataUser.id_vendor,\n      },\n    });\n    for (let i = 0; i < ticketType.length; i++) {\n      for (let x = 1; x < 13; x++) {\n        var jumlah = await db.history_ticket.count({\n          where: {\n            OR: [\n              {\n                id_jenis_ticket: ticketType[i].id_jenis_ticket,\n                solvedDay: myDate,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: x,\n              },\n              {\n                id_jenis_ticket: ticketType[i].id_jenis_ticket,\n                solvedDay: null,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: x,\n              },\n            ],\n          },\n        });\n        listType.push(jumlah);\n      }\n      var dataTipe = {\n        labels: ticketType[i].jenis_ticket,\n        color: ticketType[i].identityColor,\n        iData: listType,\n      };\n      types.push(dataTipe);\n      listType = [];\n    }\n  }\n\n  //Get Ticket by Department\n  if (task === \"department\" || task === \"all\") {\n    var ticketDepartement = await db.department.findMany({\n      where: {\n        id_vendor: user.user.dataUser.id_vendor,\n      },\n    });\n    for (let x = 0; x < ticketDepartement.length; x++) {\n      for (let i = 1; i < 13; i++) {\n        var jumlah = await db.history_ticket.count({\n          where: {\n            OR: [\n              {\n                id_department: ticketDepartement[x].id_department,\n                solvedDay: myDate,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: i,\n              },\n              {\n                id_department: ticketDepartement[x].id_department,\n                solvedDay: null,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: i,\n              },\n            ],\n          },\n        });\n        listDep.push(jumlah);\n      }\n      var dataDep = {\n        labels: ticketDepartement[x].nama_department,\n        color: ticketDepartement[x].identityColor,\n        iData: listDep,\n      };\n      departments.push(dataDep);\n      listDep = [];\n    }\n  }\n\n  // Overall Employee\n  if (task === \"overallEmployee1\" || task === \"all\") {\n    var ticketOverallEmployee = await db.employee.findMany({\n      where: {\n        id_vendor: user.user.dataUser.id_vendor,\n      },\n    });\n    for (let x = 0; x < ticketOverallEmployee.length; x++) {\n      for (let i = 1; i < 13; i++) {\n        var jumlah = await db.history_ticket.count({\n          where: {\n            OR: [\n              {\n                id_employee: ticketOverallEmployee[x].id_employee,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: i,\n              },\n              {\n                id_employee: ticketOverallEmployee[x].id_employee,\n                id_vendor: user.user.dataUser.id_vendor,\n                tahun,\n                bulan: i,\n              },\n            ],\n          },\n        });\n        listEmployee1.push(jumlah);\n      }\n      var dataEmployee = {\n        labels: ticketOverallEmployee[x].nama_employee,\n        color: ticketOverallEmployee[x].identityColor,\n        iData: listEmployee1,\n      };\n      totalEmployee1.push(dataEmployee);\n      listEmployee1 = [];\n    }\n  }\n\n  // Employee Level Low\n  if (task === \"employeeLow\" || task === \"all\") {\n    var employeeLevel = await db.employee.findMany({\n      where: {\n        id_vendor: user.user.dataUser.id_vendor,\n      },\n    });\n    for (let x = 0; x < employeeLevel.length; x++) {\n      for (let i = 1; i < 13; i++) {\n        var jumlah = await db.history_ticket.count({\n          where: {\n            OR: [\n              {\n                id_employee: employeeLevel[x].id_employee,\n                solvedDay: myDate,\n                id_vendor: user.user.dataUser.id_vendor,\n                id_level_ticket: 2,\n                tahun,\n                bulan: i,\n              },\n              {\n                id_employee: employeeLevel[x].id_employee,\n                solvedDay: null,\n                id_vendor: user.user.dataUser.id_vendor,\n                id_level_ticket: 2,\n                tahun,\n                bulan: i,\n              },\n            ],\n          },\n        });\n        listEmployeeLow.push(jumlah);\n      }\n      var dataEmployeeLow1 = {\n        labels: employeeLevel[x].nama_employee,\n        color: employeeLevel[x].identityColor,\n        iData: listEmployeeLow,\n      };\n      employeeLow.push(dataEmployeeLow1);\n      listEmployeeLow = [];\n    }\n  }\n\n  mValue = {\n    overall: total,\n    level: stats,\n    mType: types,\n    department: departments,\n    overallEmployee: totalEmployee,\n    listEmployee1: totalEmployee1,\n    employeeLevel: employeeLow,\n  };\n\n  reply.send({\n    data: mValue,\n  })\n}","figma":{}},"title":"ticket-report","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"66283","slug":"/api/ticket-report","site":"*","id":"56750"}